<<<<<<< HEAD
library(dplyr)
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
install.packages("devtools")
library(knitr)
library(jsonlite)
library(dplyr)
library(knitr)
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
install.packages("devtools")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
![](`r repos.frame$owner.avatar_url[1]`)
`r repos.frame$owner.avatar_url[1]
---
title: "Assignment 5"
author: "Mitchell O'Rourke"
date: "October 30, 2016"
output: html_document
---
```{r, echo = FALSE}
#knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user)
data <- fromJSON(complete, api.key)
repos.sorted <- paste0("https://api.github.com/users/", user, "/repos", "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
repos.frame <- data.frame(repos.data)
flattened <- flatten(repos.frame)
num.repos <- nrow(flattened)
most_frame <- filter(flattened, forks_count == max(forks_count))
most_popular <- select(most_frame, name)
```
#`r user`
User *`r user`* currently has `r num.repos` repositories, *`r most_popular`* being the repository that has been forked the most! Here we can see a picture of *`r user`*:
![](`r repos.frame$owner.avatar_url[1]`)
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
---
title: "Assignment 5"
author: "Mitchell O'Rourke"
date: "October 30, 2016"
output: html_document
---
```{r, echo = FALSE}
#knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user)
data <- fromJSON(complete, api.key)
repos.sorted <- paste0("https://api.github.com/users/", user, "/repos", "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
repos.frame <- data.frame(repos.data)
flattened <- flatten(repos.frame)
num.repos <- nrow(flattened)
most_frame <- filter(flattened, forks_count == max(forks_count))
most_popular <- select(most_frame, name)
```
#`r user`
User *`r user`* currently has `r num.repos` repositories, *`r most_popular`* being the repository that has been forked the most! Here we can see a picture of *`r user`*:
![](`r repos.frame$owner.avatar_url`)
---
title: "Assignment 5"
author: "Mitchell O'Rourke"
date: "October 30, 2016"
output: html_document
---
```{r, echo = FALSE}
#knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repos.sorted <- paste0("https://api.github.com/users/", user, "/repos", "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
repos.frame <- data.frame(repos.data)
flattened <- flatten(repos.frame)
num.repos <- nrow(flattened)
most_frame <- filter(flattened, forks_count == max(forks_count))
most_popular <- select(most_frame, name)
```
#`r user`
User *`r user`* currently has `r num.repos` repositories, *`r most_popular`* being the repository that has been forked the most! Here we can see a picture of *`r user`*:
![](`r repos.frame$owner.avatar_url`)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
repos.frame <- data.frame(repos.data)
flattened <- flatten(repos.frame)
num.repos <- nrow(flattened)
most_frame <- filter(flattened, forks_count == max(forks_count))
most_popular <- select(most_frame, name)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num.repos <- nrow(flattened)
most_frame <- filter(flattened, forks_count == max(forks_count))
most_popular <- select(most_frame, name)
```
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num_repos <- nrow(repos.frame)
most.frame <- filter(repos.frame, forks_count == max(forks_count))
most_popular <- select(most.frame, name)
format(repos.frame$created_at, format = "%B %d %Y")
format(repos.frame$created_at, format = "%B %d %Y %A")
format(repos.frame$created_at, format = "%Y %B %d %A")
format(repos.frame$created_at, format = "%Y %B %d %A")
format(dates, format = "%Y %B %d %A")
dates <- repos.frame$created_at
format(dates, format = "%Y %B %d %A")
dates <- asDate(repos.frame$created_at)
format(dates, format = "%Y %B %d %A")
dates <- as.Date(repos.frame$created_at)
format(dates, format = "%Y %B %d %A")
dates <- as.Date(repos.frame$created_at)
format(dates, format = "%A %Y %B %d")
dates <- as.Date(repos.frame$created_at)
new.dates <- format(dates, format = "%A %Y %B %d")
mutate(repos.frame, new.dates )
new.repos.frame <- mutate(repos.frame, new.dates )
View(new.repos.frame)
```{r, echo = FALSE}
#knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num_repos <- nrow(repos.frame)
most.frame <- filter(repos.frame, forks_count == max(forks_count))
most_popular <- select(most.frame, name)
```
```{r, echo = FALSE}
#knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num_repos <- nrow(repos.frame)
most.frame <- filter(repos.frame, forks_count == max(forks_count))
most_popular <- select(most.frame, name)
```
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num_repos <- nrow(repos.frame)
most.frame <- filter(repos.frame, forks_count == max(forks_count))
most_popular <- select(most.frame, name)
most_popular
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
date <- as.Date(repos.frame$created_at)
dates <- format(date, format = "%A %Y %B %d")
new.repos.frame <- mutate(repos.frame, dates )
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
View(table.data)
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data, Full Name of Repository, Private, Url of Website, Date Created)
names(table.data) = names(table.data, Full Name of Repository, Private, Url of Website, Date Created)
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data) = names(table.data, Full Name of Repository, Private, Url of Website, Date Created)
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
rename(table.data, c("full_name"="Full Name of Repository", "private"="Private", "html_url"="Url of Website", "dates"="Date Created"))
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
rename(table.data, c("full_name"="Full Name of Repository", "private"="Private", "html_url"="Url of Website", "dates"="Date Created"))
library(plyr)
library(dplyr)
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
rename(table.data, c("full_name"="Full Name of Repository", "private"="Private", "html_url"="Url of Website", "dates"="Date Created"))
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data)[names(table.data) == "full_name"] <- "Full Name"
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data)[names(table.data) == "full_name"] <- "Full Name"
names(table.data)[names(table.data) == "html_url"] <- "Url of Website"
names(table.data)[names(table.data) == "dates"] <- "Date Created"
View(table.data)
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data)[names(table.data) == "full_name"] <- "Full Name"
names(table.data)[names(table.data) == "html_url"] <- "Url of Website"
names(table.data)[names(table.data) == "dates"] <- "Date Created"
knitr::kable(table.data)
select(new.repos.frame, language, forks_count)
select(new.repos.frame, language, forks_count, size)
library(graphics)
library(graphics)
plot(new.repos.frame)
hist(new.repos.frame)
hist(dates)
hist(num_repos)
hist(select(new.repos.data, size, forks_count, ))
---
title: "Assignment 5"
author: "Mitchell O'Rourke"
date: "October 30, 2016"
output: html_document
---
```{r, echo = FALSE}
#knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num_repos <- nrow(repos.frame)
most.frame <- filter(repos.frame, forks_count == max(forks_count))
most_popular <- select(most.frame, name)
```
#`r user`
User *`r user`* currently has `r num_repos` repositories, *`r most_popular`* being the repository that has been forked the most! Here we can see a picture of *`r user`*:
![](`r repos.frame$owner.avatar_url`)
```{r, echo = FALSE}
library(dplyr)
date <- as.Date(repos.frame$created_at)
dates <- format(date, format = "%A %Y %B %d")
new.repos.frame <- mutate(repos.frame, dates )
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data)[names(table.data) == "full_name"] <- "Full Name"
names(table.data)[names(table.data) == "html_url"] <- "Url of Website"
names(table.data)[names(table.data) == "dates"] <- "Date Created"
knitr::kable(table.data)
second.table <- select(new.repos.frame, language, forks_count, size)
knitr::kable(second.table)
#challenge
library(graphics)
hist(select(new.repos.data, size, forks_count, ))
```
hist(select(new.repos.frame, size, forks_count, ))
plot(select(new.repos.frame, size, forks_count, ))
plot(new.repos.frame)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num_repos <- nrow(repos.frame)
most.frame <- filter(repos.frame, forks_count == max(forks_count))
most_popular <- select(most.frame, name)
library(dplyr)
date <- as.Date(repos.frame$created_at)
dates <- format(date, format = "%A %Y %B %d")
new.repos.frame <- mutate(repos.frame, dates )
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data)[names(table.data) == "full_name"] <- "Full Name"
names(table.data)[names(table.data) == "html_url"] <- "Url of Website"
names(table.data)[names(table.data) == "dates"] <- "Date Created"
knitr::kable(table.data)
second.table <- select(new.repos.frame, language, forks_count, size)
knitr::kable(second.table)
#challenge
library(graphics)
plot(new.repos.frame)
temp <- select(new.repos.frame, name, forks_count)
plot.design(temp)
---
title: "index"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "index"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = False)
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
library(plotly)
install.packages("plotly")
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
shiny::runApp('Downloads/School/INFO201/a8-building-apps-mtorourke')
library("PKI", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("RJSONIO", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
runApp('Downloads/School/INFO201/a8-building-apps-mtorourke')
runApp('Downloads/School/INFO201/a8-building-apps-mtorourke')
runApp('Downloads/School/INFO201/a8-building-apps-mtorourke')
library(gapminder)
library(modelr)
library(tidyverse)
# Initial view of the data with ggplot
gapminder %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
library(gapminder)
library(modelr)
library(tidyverse)
install.packages('modelr')
install.packages('tidyverse')
install.packages('gapminder')
library(gapminder)
library(modelr)
library(tidyverse)
gapminder %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
nz <- filter(gapminder, country == "New Zealand")
rsconnect::deployApp("/Users/Mitch/Downloads/School/INFO201/a8-building-apps-mtorourke")
nz
gapminder %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
# Look only at new zealand
nz <- filter(gapminder, country == "New Zealand")
nz %>%
ggplot(aes(year, lifeExp)) +
geom_line() +
ggtitle("Full data = ")
nz_mod <- lm(lifeExp ~ year, data = nz)
nz %>%
add_predictions(nz_mod) %>%
ggplot(aes(year, pred)) +
geom_line() +
ggtitle("Linear trend + ")
nz %>%
add_residuals(nz_mod) %>%
ggplot(aes(year, resid)) +
geom_hline(yintercept = 0, colour = "white", size = 3) +
geom_line() +
ggtitle("Remaining pattern")
getwd()
setwd("/Users/Mitch/Downloads/School/INFO201/info201-final-project/")
getwd()
#Mitchell O'Rourke - Shiny Server
#load shiny library
library(shiny)
library(dplyr)
#sets working directory
setwd("/Users/Mitch/Downloads/School/INFO201/info201-final-project/")
source("./scripts/DataVisualization.R")
source("./scripts/DataCalculations.R")
shinyServer(function(input, output) {
})
setwd("/Users/Mitch/Downloads/School/INFO201/info201-final-project/")
source("./scripts/DataVisualization.R")
getwd()
setwd("/Users/Mitch/Downloads/School/INFO201/info201-final-project/data/")
source("./scripts/DataVisualization.R")
setwd("/Users/Mitch/Downloads/School/INFO201/info201-final-project/scripts/")
source("./scripts/DataVisualization.R")
source("./DataVisualization.R")
source("DataVisualization.R")
setwd("/Users/Mitch/Downloads/School/INFO201/info201-final-project/")
source("./scripts/ScoreCalculations.R")
source("./scripts/DataVisualization.R")
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
=======
worst.hwy.mpg <- filter(two.wheel.20.mpg, hwy == min(hwy))
View(two.wheel.20.mpg)
View(vehicles.1997)
View(worst.hwy.mpg)
filtered <- filter(two.wheel.20.mpg, hwy == min(hwy))
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles.1997 <- filter(vehicles, year == 1997)
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
unique(vehicles.1997$year)
# Create a data.frame of 2-Wheel Drive vehicles that get more than 20 miles/gallon in the city
two.wheel.20.mpg <- filter(vehicles, drive == '2-Wheel Drive', cty > 20)
# Of those vehicles, what is the vehicle ID of the vehicle with the worst hwy mpg?
filtered <- filter(two.wheel.20.mpg, hwy == min(hwy))
worst.hwy <- select(filtered, id)
MakeYearFilter <- function(my_make, my_year) {
filtered <- filter(vehicles, make == my_make, year == my_year) %>%
filter(hwy == max(hwy))
return(filtered))
MakeYearFilter <- function(my_make, my_year) {
filtered <- filter(vehicles, make == my_make, year == my_year) %>%
filter(hwy == max(hwy))
return(filtered))
}
MakeYearFilter <- function(my_make, my_year) {
filtered <- filter(vehicles, make == my_make, year == my_year) %>%
filter(hwy == max(hwy))
return(filtered))
}
MakeYearFilter <- function(my_make, my_year) {
filtered <- filter(vehicles, make == my_make, year == my_year) %>%
filter(hwy == max(hwy))
return(filtered)
}
MakeYearFilter('Honda', 1995)
library(fueleconomy)
View(vehicles)
# Which Accura model has the best hwy MPG in 2015? (without method chaining)
acuras <- filter(vehicles, make == 'Acura', year == 2015)
best.acura <- filter(acuras, hwy == max(hwy))
best.model <- select(best.acura, model)
# Which Accura model has the best hwy MPG in 2015? (nesting functions)
best.model <- select(
filter(
filter(vehicles, make == 'Acura', year == 2015), hwy == max(hwy)
), model
)
# Which Accura model has the best hwy MPG in 2015? (pipe operator)
best.model <- filter(vehicles, make == 'Acura', year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
---
title: "index"
author: "Emilee Helm"
date: "10/31/2016"
output: html_document
---
```{r, echo= FALSE}
install.packages('jsonlite')
install.packages('knitr')
install.packages('dplyr')
install.packages('rmarkdown')
library('jsonlite')
library('knitr')
library('dplyr')
library('rmarkdown')
# QUERYING DATA
# Seach Base
base <- 'https://api.github.com/'
# User Info
user.name <-  'users/mbostock'
access.token <- paste0('api-key=', 'b379a3b2e481bc8d349d3dd43a5afd380eae5cc6')
user.query <- paste0(base, user.name)
user.url.info <- fromJSON(user.query)
# Request info specifically about the repositories
user.repo.url <- user.url.info$repos_url
user.repo.data <- fromJSON(user.url.info$repos_url)
# Sorting URL
sort.created <- paste0('?sort=', 'created')
sort.per.page <- paste0('per_page=100')
user.repo.url.sort <- paste0(user.repo.url, sort.created, '&', sort.per.page, '&', access.token)
# Use flatten, split out columns that are data.frames into multiple colums
# This adds new variables and allows us to sort through the data
user.repo <- fromJSON(user.repo.url.sort, flatten = TRUE)
num_repos <- nrow(user.repo)
most_popular <- toString(filter(user.repo, forks == max(forks)) %>%
select(name))
```
helllo
.libPaths()
chooseCRANmirror(81)
View(user.repo)
user.chosen <- 'mbostock'
user.repo$owner.avatar_url
# Converts created_at column into more readable form
dates.read <- mutate(user.repo, date.created = format(as.Date(created_at), "%m/ %d/ %Y"))
library('dplyr')
# Converts created_at column into more readable form
dates.read <- mutate(user.repo, date.created = format(as.Date(created_at), "%m/ %d/ %Y"))
View(dates.read)
table.data <- data.frame(user.repo[3:5])
View(table.data)
table.data <- data.frame(user.repo[3:5]) %>%
mutate(user.repo, date = dates.read)
table.data <- data.frame(user.repo[3:5]) %>%
mutate(user.repo, date = user.repo$dates.read)
table.data <- data.frame(user.repo[3:5]) %>%
mutate(user.repo, date = dates.read)
table.data <- data.frame(user.repo[3:5]) %>%
mutate(user.repo, format.dates = dates.read)
table.data <- data.frame(user.repo[3:5]) %>%
mutate(format.dates = dates.read)
table.data <- data.frame(user.repo[3:5]) %>%
mutate(date() = date.created)
table.data <- data.frame(user.repo[3:5]) %>%
mutate(formatted.date = date.created)
table.data <- data.frame(user.repo[3:5]) %>%
mutate(formatted.date = dates.read$date.created)
View(table.data)
colnames(table.data) <- c('Repository Name', 'Private Repository', 'Repository URL', 'Dated Created')
library('knitr')
library('jsonlite')
library('dplyr')
library('rmarkdown')
Summarized Table: `r kable(group_by(user.repo, language) %>%
summarise(forks = mean(forks), total_repo = n()))
`r kable(group_by(user.repo, language) %>%
summarise(forks = mean(forks), total_repo = n()))`
kable(group_by(user.repo, language) %>% summarise(forks = mean(forks), total_repo = n()))
summary.table <- group_by(user.repo, language) %>% summarise(forks = mean(forks), total_repo = n())
colnames(summary.table) <- c('Language', 'Forks', 'Total Repositories')
View(summary.table)
install.packages('ggplot2')
library('ggplot2')
install.packages('plotly')
library('plotly')
p <- plot_ly(
x = ("C++", "CSS", "JavaScript", "N/A")
y = (10, 2, 11.42857, 3.2)
name = "Languages Forked",
type =
)
p <- plot_ly(
x = ("C++", "CSS", "JavaScript", "N/A")
y = (10, 2, 11.42857, 3.2)
name = "Languages Forked",
type = "bar"
)
install.packages('plotly')
install.packages("plotly")
library('plotly')
p <- plot_ly(
x = ("C++", "CSS", "JavaScript", "N/A")
y = (10, 2, 11.42857, 3.2)
name = "Languages Forked",
type = "bar"
)
p <- plot_ly(
x = c("C++", "CSS", "JavaScript", "N/A"),
y = c(10, 2, 11.42857, 3.2)
name = "Languages Forked",
type = "bar"
)
library('plotly')
p <- plot_ly(
x = c("C++", "CSS", "JavaScript", "N/A"),
y = c(10, 2, 11.42857, 3.2),
name = "Languages Forked",
type = "bar"
)
View(p)
p <- plot_ly(
x = c("C++", "CSS", "JavaScript", "N/A"),
y = c(10, 2, 11.42857, 3.2),
name = "Languages Forked",
type = "bar"
)
plot_ly(user.repo, x = ~watchers, y = ~forks, type = 'scatter',
mode = 'text', text = ~Watchers, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Watchers and Forks',
xaxis = list(title = 'Watchers',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Forks',
range = c(0,500)))
plot_ly(user.repo, x = ~watchers, y = ~forks, type = 'scatter',
mode = 'text', text = ~watchers, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Watchers and Forks',
xaxis = list(title = 'Watchers',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Forks',
range = c(0,500)))
plot_ly(user.repo, x = ~watchers, y = ~forks, type = 'scatter',
mode = 'text', text = ~watchers, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Watchers and Forks',
xaxis = list(title = 'Watchers',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Forks',
range = c(0,300)))
plot_ly(user.repo, x = ~watchers, y = ~forks, type = 'bar',
mode = 'text', text = ~watchers, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Watchers and Forks',
xaxis = list(title = 'Watchers',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Forks',
range = c(0,300)))
plot_ly(user.repo, x = ~watchers, y = ~forks, type = 'bar',
mode = 'text', text = ~watchers, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Watchers and Forks',
xaxis = list(title = 'Watchers',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Forks',
range = c(0,100)))
plot_ly(user.repo, x = ~watchers, y = ~forks, type = 'bar',
mode = 'text', text = ~watchers, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Watchers and Forks',
xaxis = list(title = 'Watchers',
zeroline = TRUE,
range = c(0, 350)),
yaxis = list(title = 'Forks',
range = c(0,100)))
plot_ly(user.repo, x = ~watchers, y = ~forks, type = 'bar',
mode = 'text', text = ~watchers, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Watchers and Forks',
xaxis = list(title = 'Watchers',
zeroline = TRUE,
range = c(0, 500)),
yaxis = list(title = 'Forks',
range = c(0,100)))
source('~/Desktop/a5-assignment.R')
install.packages("jsonlite")
library(plotly) set.seed(100) d <- diamonds[sample(nrow(diamonds), 1000), ] plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("Clarity: ", clarity)
setwd("~/Desktop/info201-final-project/data")
setwd("~/Desktop/info201-final-project/data")
setwd('~/Desktop/info201-final-project/data')
read.csv('team-picking-categories.csv', stringsAsFactors = FALSE)
data <- read.csv('team-picking-categories.csv', stringsAsFactors = FALSE)
library(plotly)
library(dplyr)
View(data)
Animals <- c("giraffes", "orangutans", "monkeys")
SF_Zoo <- c(20, 14, 23)
LA_Zoo <- c(12, 18, 29)
data <- read.csv('team-picking-categories.csv', stringsAsFactors = FALSE)
p <- plot_ly(data, x = ~Animals, y = ~SF_Zoo, type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
add_trace(z = ~Test, name = 'Test')
layout(yaxis = list(title = 'Count'), barmode = 'stack')
p
data <- read.csv('team-picking-categories.csv', stringsAsFactors = FALSE)
View(data)
Teams <- data %>%
select('TEAM') %>%
as.vector()
Teams <- data %>%
select(TEAM) %>%
as.vector()
View(Teams)
Teams <- data %>%
toString(select(TEAM) %>%
as.vector())
Teams <- data %>%
toString(select('TEAM') %>%
as.vector())
Teams <- data %>%
toString(select('TEAM') %>%
as.vector())
Teams <- toString(data %>%
select(TEAM) %>%
as.vector())
Teams <- toString(data %>%
select(TEAM))
Teams <- select(data$TEAM) %>%
as.vector()
Teams <- data$TEAM %>%
as.vector()
teams.vector <- data$TEAM %>%
as.vector()
# Visualization of data
setwd('~/Desktop/info201-final-project/data')
data <- read.csv('team-picking-categories.csv', stringsAsFactors = FALSE)
library(plotly)
library(dplyr)
teams.vector <- data$TEAM %>%
as.vector()
market.size.vector <- data$BMK %>%
as.vector()
uniform.vector <- data$UNI %>%
as.vector()
# Visualization of data
setwd('~/Desktop/info201-final-project/data')
data <- read.csv('team-picking-categories.csv', stringsAsFactors = FALSE)
library(plotly)
library(dplyr)
teams.vector <- data$TEAM %>%
as.vector()
market.big.vector <- data$BMK %>%
as.vector()
uniform.vector <- data$UNI %>%
as.vector()
coaching.vector <- data$CCH %>%
as.vector()
stadium.exp.vector <- data$STX %>%
as.vector()
market.small.vector <- data$SMK %>%
as.vector()
data <- read.csv('team-picking-categories.csv', stringsAsFactors = FALSE)
library(plotly)
library(dplyr)
teams.vector <- data$TEAM %>%
as.vector()
market.big.vector <- data$BMK %>%
as.vector()
uniform.vector <- data$UNI %>%
as.vector()
coaching.vector <- data$CCH %>%
as.vector()
stadium.exp.vector <- data$STX %>%
as.vector()
market.small.vector <- data$SMK %>%
as.vector()
affordability.vector <- data$AFF %>%
as.vector()
stl.prox.vector <- data$SLP %>%
as.vector()
nyc.prox.vector <- data$NYP %>%
as.vector()
fan.relations.vector <- data$FRL %>%
as.vector()
bang.vector <- data$BNG %>%
as.vector()
tradition.vector <- data$TRD %>%
as.vector()
bandwagon.vector <- data$BWG %>%
as.vector()
future.wins.vector <- data$FUT %>%
as.vector()
players.vector <- data$PLA %>%
as.vector()
owners.vector <- data$OWN %>%
as.vector()
behavior.vector <- data$BEH %>%
as.vector()
p <- plot_ly(data, x = ~TEAM, y = ~BMK, type = 'bar', name = 'Big Market') %>%
add_trace(y = ~UNI, name = 'Uniform') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
p
p <- plot_ly(data, x = ~TEAM, y = ~BMK, type = 'bar', name = 'Big Market') %>%
add_trace(y = ~UNI, name = 'Uniform') %>%
layout(yaxis = list(title = 'Score'), barmode = 'stack')
p
# Stacked Bar Plot - Building
p <- plot_ly(data, x = ~Team, y = ~BMK, type = 'bar', name = 'Big Market') %>%
add_trace(y = ~UNI, name = 'Uniform') %>%
layout(yaxis = list(title = 'Score'), barmode = 'stack')
p
p
# Stacked Bar Plot - Building
p <- plot_ly(data, x = ~Team, y = ~BMK, type = 'bar', name = 'Big Market') %>%
add_trace(y = ~UNI, name = 'Uniform') %>%
layout(yaxis = list(title = 'Score'), barmode = 'stack')
p
p <- plot_ly(data, x = ~TEAM, y = ~BMK, type = 'bar', name = 'Big Market') %>%
add_trace(y = ~UNI, name = 'Uniform') %>%
layout(yaxis = list(title = 'Score'), barmode = 'stack')
p <- plot_ly(data, x = ~TEAM, y = ~BMK, type = 'bar', name = 'Big Market') %>%
add_trace(y = ~UNI, name = 'Uniform') %>%
add_trace(y = ~CCH, name = 'Coaching') %>%
add_trace(y = ~STX, name = 'Stadium Experience') %>%
layout(yaxis = list(title = 'Score'), barmode = 'stack')
p
p <- plot_ly(data, x = ~TEAM, y = ~BMK, type = 'bar', name = 'Big Market') %>%
add_trace(y = ~UNI, name = 'Uniform') %>%
add_trace(y = ~CCH, name = 'Coaching') %>%
add_trace(y = ~STX, name = 'Stadium Experience') %>%
add_trace(y = ~SMK, name = 'Small Market Value') %>%
add_trace(y = ~AFF, name = 'Affordability') %>%
add_trace(y = ~FRL, name = 'Fan Relations') %>%
add_trace(y = ~BNG, name = 'Bang For Your Buck') %>%
add_trace(y = ~TRD, name = 'Tradition') %>%
add_trace(y = ~BWG, name = 'Bandwagon Factor') %>%
add_trace(y = ~FUT, name = 'Future Wins') %>%
add_trace(y = ~PLA, name = 'Players Likability') %>%
add_trace(y = ~OWN, name = 'Ownership') %>%
add_trace(y = ~BEH, name = 'Behavior') %>%
layout(yaxis = list(title = 'Score'), barmode = 'stack')
p
p
setwd('~/Desktop/info201-final-project/data')
data <- read.csv('team-picking-categories.csv', stringsAsFactors = FALSE)
p <- plot_ly(data, x = ~TEAM, y = ~BMK, type = 'bar', name = 'Big Market') %>%
add_trace(y = ~UNI, name = 'Uniform') %>%
add_trace(y = ~CCH, name = 'Coaching') %>%
add_trace(y = ~STX, name = 'Stadium Experience') %>%
add_trace(y = ~SMK, name = 'Small Market Value') %>%
add_trace(y = ~AFF, name = 'Affordability') %>%
add_trace(y = ~FRL, name = 'Fan Relations') %>%
add_trace(y = ~BNG, name = 'Bang For Your Buck') %>%
add_trace(y = ~TRD, name = 'Tradition') %>%
add_trace(y = ~BWG, name = 'Bandwagon Factor') %>%
add_trace(y = ~FUT, name = 'Future Wins') %>%
add_trace(y = ~PLA, name = 'Players Likability') %>%
add_trace(y = ~OWN, name = 'Ownership') %>%
add_trace(y = ~BEH, name = 'Behavior') %>%
layout(yaxis = list(title = 'Score'), barmode = 'stack')
p
Teams <- data$TEAM
p <- plot_ly(data, x = ~Teams, y = ~BMK, type = 'bar', name = 'Big Market') %>%
add_trace(y = ~UNI, name = 'Uniform') %>%
add_trace(y = ~CCH, name = 'Coaching') %>%
add_trace(y = ~STX, name = 'Stadium Experience') %>%
add_trace(y = ~SMK, name = 'Small Market Value') %>%
add_trace(y = ~AFF, name = 'Affordability') %>%
add_trace(y = ~FRL, name = 'Fan Relations') %>%
add_trace(y = ~BNG, name = 'Bang For Your Buck') %>%
add_trace(y = ~TRD, name = 'Tradition') %>%
add_trace(y = ~BWG, name = 'Bandwagon Factor') %>%
add_trace(y = ~FUT, name = 'Future Wins') %>%
add_trace(y = ~PLA, name = 'Players Likability') %>%
add_trace(y = ~OWN, name = 'Ownership') %>%
add_trace(y = ~BEH, name = 'Behavior') %>%
layout(yaxis = list(title = 'Score'), barmode = 'stack')
p
Team <- data$TEAM
setwd('~/Desktop/info201-final-project/data')
data <- read.csv('team-picking-categories.csv', stringsAsFactors = FALSE)
Team <- data$TEAM
p <- plot_ly(data, x = ~Teams, y = ~BMK, type = 'bar', name = 'Big Market') %>%
add_trace(y = ~UNI, name = 'Uniform') %>%
add_trace(y = ~CCH, name = 'Coaching') %>%
add_trace(y = ~STX, name = 'Stadium Experience') %>%
add_trace(y = ~SMK, name = 'Small Market Value') %>%
add_trace(y = ~AFF, name = 'Affordability') %>%
add_trace(y = ~FRL, name = 'Fan Relations') %>%
add_trace(y = ~BNG, name = 'Bang For Your Buck') %>%
add_trace(y = ~TRD, name = 'Tradition') %>%
add_trace(y = ~BWG, name = 'Bandwagon Factor') %>%
add_trace(y = ~FUT, name = 'Future Wins') %>%
add_trace(y = ~PLA, name = 'Players Likability') %>%
add_trace(y = ~OWN, name = 'Ownership') %>%
add_trace(y = ~BEH, name = 'Behavior') %>%
layout(yaxis = list(title = 'Score'), barmode = 'stack')
p <- plot_ly(data, x = ~Team, y = ~BMK, type = 'bar', name = 'Big Market') %>%
add_trace(y = ~UNI, name = 'Uniform') %>%
add_trace(y = ~CCH, name = 'Coaching') %>%
add_trace(y = ~STX, name = 'Stadium Experience') %>%
add_trace(y = ~SMK, name = 'Small Market Value') %>%
add_trace(y = ~AFF, name = 'Affordability') %>%
add_trace(y = ~FRL, name = 'Fan Relations') %>%
add_trace(y = ~BNG, name = 'Bang For Your Buck') %>%
add_trace(y = ~TRD, name = 'Tradition') %>%
add_trace(y = ~BWG, name = 'Bandwagon Factor') %>%
add_trace(y = ~FUT, name = 'Future Wins') %>%
add_trace(y = ~PLA, name = 'Players Likability') %>%
add_trace(y = ~OWN, name = 'Ownership') %>%
add_trace(y = ~BEH, name = 'Behavior') %>%
layout(yaxis = list(title = 'Score'), barmode = 'stack')
library(dplyr)
library(plotly)
VisualizeData <- function(x) {
Team <- data$TEAM
p <- plot_ly(x, x = ~Team, y = ~BMK, type = 'bar', name = 'Big Market') %>%
add_trace(y = ~UNI, name = 'Uniform') %>%
add_trace(y = ~CCH, name = 'Coaching') %>%
add_trace(y = ~STX, name = 'Stadium Experience') %>%
add_trace(y = ~SMK, name = 'Small Market Value') %>%
add_trace(y = ~AFF, name = 'Affordability') %>%
add_trace(y = ~FRL, name = 'Fan Relations') %>%
add_trace(y = ~BNG, name = 'Bang For Your Buck') %>%
add_trace(y = ~TRD, name = 'Tradition') %>%
add_trace(y = ~BWG, name = 'Bandwagon Factor') %>%
add_trace(y = ~FUT, name = 'Future Wins') %>%
add_trace(y = ~PLA, name = 'Players Likability') %>%
add_trace(y = ~OWN, name = 'Ownership') %>%
add_trace(y = ~BEH, name = 'Behavior') %>%
layout(yaxis = list(title = 'Score'), barmode = 'stack')
return(p)
}
VisualizeData(p)
VisualizeData <- function(x) {
p <- plot_ly(x, x = ~Team, y = ~BMK, type = 'bar', name = 'Big Market') %>%
add_trace(y = ~UNI, name = 'Uniform') %>%
add_trace(y = ~CCH, name = 'Coaching') %>%
add_trace(y = ~STX, name = 'Stadium Experience') %>%
add_trace(y = ~SMK, name = 'Small Market Value') %>%
add_trace(y = ~AFF, name = 'Affordability') %>%
add_trace(y = ~FRL, name = 'Fan Relations') %>%
add_trace(y = ~BNG, name = 'Bang For Your Buck') %>%
add_trace(y = ~TRD, name = 'Tradition') %>%
add_trace(y = ~BWG, name = 'Bandwagon Factor') %>%
add_trace(y = ~FUT, name = 'Future Wins') %>%
add_trace(y = ~PLA, name = 'Players Likability') %>%
add_trace(y = ~OWN, name = 'Ownership') %>%
add_trace(y = ~BEH, name = 'Behavior') %>%
layout(yaxis = list(title = 'Score'), barmode = 'stack')
return(p)
}
VisualizeData(data)
setwd("~/Desktop/info201-final-project")
>>>>>>> commit
