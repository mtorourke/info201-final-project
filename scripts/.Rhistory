data <- fromJSON(complete, api.key)
data
repos.data <- fromJSON(paste0("https://api.github.com/users/mbostock/repos", api.key))
repos.data <- fromJSON(paste0("https://api.github.com/users/", user, "/repos"), api.key)
repos.data
repos.data <- fromJSON(paste0("https://api.github.com/users/", user, "/repos"), api.key)
repos.data <- fromJSON(paste0("https://api.github.com/users/", user, "/repos"), api.key, 1:100)
repos.data
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
repos.sorted <- paste0("https://api.github.com/users/", user, "/repos/", "order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
repos.sorted <- paste0("https://api.github.com/users/", user, "/repos/", "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
repos.sorted <- paste0("https://api.github.com/users/", user, "/repos", "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
repos.data
repos.frame <- data.frame(repos.data)
repos.frame
View(repos.frame)
flattened <- flatten(repos.frame)
flattened
View(flattened)
num.repos <- nrows(flattened)
num.repos <- nrow(flattened)
num.repos
most_popular <- row.names(flattened, forks_count == max(forks_count))
most_popular <- row.names(flattened)[flattened[["forks_count"]] == max(flattened$forks_count, na.rm = FALSE)]
most.popular
most_popular
most_frame <- filter(flattened, forks_count == max(forks_count))
most_popular <- select(most_frame, name)
most_popular
User *`r user`* currently has `r num.repos` repositories, `r most_popular` being the repository that has been forked the most! Here we can see a picture of *`r user`*:
library(jsonlite)
library(dplyr)
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
install.packages("devtools")
library(knitr)
library(jsonlite)
library(dplyr)
library(knitr)
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
install.packages("devtools")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
![](`r repos.frame$owner.avatar_url[1]`)
`r repos.frame$owner.avatar_url[1]
---
title: "Assignment 5"
author: "Mitchell O'Rourke"
date: "October 30, 2016"
output: html_document
---
```{r, echo = FALSE}
#knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user)
data <- fromJSON(complete, api.key)
repos.sorted <- paste0("https://api.github.com/users/", user, "/repos", "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
repos.frame <- data.frame(repos.data)
flattened <- flatten(repos.frame)
num.repos <- nrow(flattened)
most_frame <- filter(flattened, forks_count == max(forks_count))
most_popular <- select(most_frame, name)
```
#`r user`
User *`r user`* currently has `r num.repos` repositories, *`r most_popular`* being the repository that has been forked the most! Here we can see a picture of *`r user`*:
![](`r repos.frame$owner.avatar_url[1]`)
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
---
title: "Assignment 5"
author: "Mitchell O'Rourke"
date: "October 30, 2016"
output: html_document
---
```{r, echo = FALSE}
#knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user)
data <- fromJSON(complete, api.key)
repos.sorted <- paste0("https://api.github.com/users/", user, "/repos", "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
repos.frame <- data.frame(repos.data)
flattened <- flatten(repos.frame)
num.repos <- nrow(flattened)
most_frame <- filter(flattened, forks_count == max(forks_count))
most_popular <- select(most_frame, name)
```
#`r user`
User *`r user`* currently has `r num.repos` repositories, *`r most_popular`* being the repository that has been forked the most! Here we can see a picture of *`r user`*:
![](`r repos.frame$owner.avatar_url`)
---
title: "Assignment 5"
author: "Mitchell O'Rourke"
date: "October 30, 2016"
output: html_document
---
```{r, echo = FALSE}
#knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repos.sorted <- paste0("https://api.github.com/users/", user, "/repos", "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
repos.frame <- data.frame(repos.data)
flattened <- flatten(repos.frame)
num.repos <- nrow(flattened)
most_frame <- filter(flattened, forks_count == max(forks_count))
most_popular <- select(most_frame, name)
```
#`r user`
User *`r user`* currently has `r num.repos` repositories, *`r most_popular`* being the repository that has been forked the most! Here we can see a picture of *`r user`*:
![](`r repos.frame$owner.avatar_url`)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
repos.frame <- data.frame(repos.data)
flattened <- flatten(repos.frame)
num.repos <- nrow(flattened)
most_frame <- filter(flattened, forks_count == max(forks_count))
most_popular <- select(most_frame, name)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num.repos <- nrow(flattened)
most_frame <- filter(flattened, forks_count == max(forks_count))
most_popular <- select(most_frame, name)
```
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num_repos <- nrow(repos.frame)
most.frame <- filter(repos.frame, forks_count == max(forks_count))
most_popular <- select(most.frame, name)
format(repos.frame$created_at, format = "%B %d %Y")
format(repos.frame$created_at, format = "%B %d %Y %A")
format(repos.frame$created_at, format = "%Y %B %d %A")
format(repos.frame$created_at, format = "%Y %B %d %A")
format(dates, format = "%Y %B %d %A")
dates <- repos.frame$created_at
format(dates, format = "%Y %B %d %A")
dates <- asDate(repos.frame$created_at)
format(dates, format = "%Y %B %d %A")
dates <- as.Date(repos.frame$created_at)
format(dates, format = "%Y %B %d %A")
dates <- as.Date(repos.frame$created_at)
format(dates, format = "%A %Y %B %d")
dates <- as.Date(repos.frame$created_at)
new.dates <- format(dates, format = "%A %Y %B %d")
mutate(repos.frame, new.dates )
new.repos.frame <- mutate(repos.frame, new.dates )
View(new.repos.frame)
```{r, echo = FALSE}
#knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num_repos <- nrow(repos.frame)
most.frame <- filter(repos.frame, forks_count == max(forks_count))
most_popular <- select(most.frame, name)
```
```{r, echo = FALSE}
#knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num_repos <- nrow(repos.frame)
most.frame <- filter(repos.frame, forks_count == max(forks_count))
most_popular <- select(most.frame, name)
```
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num_repos <- nrow(repos.frame)
most.frame <- filter(repos.frame, forks_count == max(forks_count))
most_popular <- select(most.frame, name)
most_popular
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
date <- as.Date(repos.frame$created_at)
dates <- format(date, format = "%A %Y %B %d")
new.repos.frame <- mutate(repos.frame, dates )
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
View(table.data)
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data, Full Name of Repository, Private, Url of Website, Date Created)
names(table.data) = names(table.data, Full Name of Repository, Private, Url of Website, Date Created)
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data) = names(table.data, Full Name of Repository, Private, Url of Website, Date Created)
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
rename(table.data, c("full_name"="Full Name of Repository", "private"="Private", "html_url"="Url of Website", "dates"="Date Created"))
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
rename(table.data, c("full_name"="Full Name of Repository", "private"="Private", "html_url"="Url of Website", "dates"="Date Created"))
library(plyr)
library(dplyr)
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
rename(table.data, c("full_name"="Full Name of Repository", "private"="Private", "html_url"="Url of Website", "dates"="Date Created"))
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data)[names(table.data) == "full_name"] <- "Full Name"
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data)[names(table.data) == "full_name"] <- "Full Name"
names(table.data)[names(table.data) == "html_url"] <- "Url of Website"
names(table.data)[names(table.data) == "dates"] <- "Date Created"
View(table.data)
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data)[names(table.data) == "full_name"] <- "Full Name"
names(table.data)[names(table.data) == "html_url"] <- "Url of Website"
names(table.data)[names(table.data) == "dates"] <- "Date Created"
knitr::kable(table.data)
select(new.repos.frame, language, forks_count)
select(new.repos.frame, language, forks_count, size)
library(graphics)
library(graphics)
plot(new.repos.frame)
hist(new.repos.frame)
hist(dates)
hist(num_repos)
hist(select(new.repos.data, size, forks_count, ))
---
title: "Assignment 5"
author: "Mitchell O'Rourke"
date: "October 30, 2016"
output: html_document
---
```{r, echo = FALSE}
#knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num_repos <- nrow(repos.frame)
most.frame <- filter(repos.frame, forks_count == max(forks_count))
most_popular <- select(most.frame, name)
```
#`r user`
User *`r user`* currently has `r num_repos` repositories, *`r most_popular`* being the repository that has been forked the most! Here we can see a picture of *`r user`*:
![](`r repos.frame$owner.avatar_url`)
```{r, echo = FALSE}
library(dplyr)
date <- as.Date(repos.frame$created_at)
dates <- format(date, format = "%A %Y %B %d")
new.repos.frame <- mutate(repos.frame, dates )
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data)[names(table.data) == "full_name"] <- "Full Name"
names(table.data)[names(table.data) == "html_url"] <- "Url of Website"
names(table.data)[names(table.data) == "dates"] <- "Date Created"
knitr::kable(table.data)
second.table <- select(new.repos.frame, language, forks_count, size)
knitr::kable(second.table)
#challenge
library(graphics)
hist(select(new.repos.data, size, forks_count, ))
```
hist(select(new.repos.frame, size, forks_count, ))
plot(select(new.repos.frame, size, forks_count, ))
plot(new.repos.frame)
library(jsonlite)
library(dplyr)
library(knitr)
user <- 'mbostock'
api.key <- 'access_token=fcba38111163ea12b944342d4134f1f54c2566b5'
complete <- paste0("https://api.github.com/users/", user, "?", api.key)
data <- fromJSON(complete)
repo.url <- data$repos_url
repos.sorted <- paste0(repo.url, "?order=created&sort_order=desc&per_page=100")
repos.data <- fromJSON(paste0(repos.sorted, "&", api.key))
flattened <- flatten(repos.data)
repos.frame <- data.frame(flattened)
num_repos <- nrow(repos.frame)
most.frame <- filter(repos.frame, forks_count == max(forks_count))
most_popular <- select(most.frame, name)
library(dplyr)
date <- as.Date(repos.frame$created_at)
dates <- format(date, format = "%A %Y %B %d")
new.repos.frame <- mutate(repos.frame, dates )
table.data <- select(new.repos.frame, full_name, private, html_url, dates)
names(table.data)[names(table.data) == "full_name"] <- "Full Name"
names(table.data)[names(table.data) == "html_url"] <- "Url of Website"
names(table.data)[names(table.data) == "dates"] <- "Date Created"
knitr::kable(table.data)
second.table <- select(new.repos.frame, language, forks_count, size)
knitr::kable(second.table)
#challenge
library(graphics)
plot(new.repos.frame)
temp <- select(new.repos.frame, name, forks_count)
plot.design(temp)
---
title: "index"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "index"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = False)
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
library(plotly)
install.packages("plotly")
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
shiny::runApp('Downloads/School/INFO201/a8-building-apps-mtorourke')
library("PKI", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("RJSONIO", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
runApp('Downloads/School/INFO201/a8-building-apps-mtorourke')
runApp('Downloads/School/INFO201/a8-building-apps-mtorourke')
runApp('Downloads/School/INFO201/a8-building-apps-mtorourke')
library(gapminder)
library(modelr)
library(tidyverse)
# Initial view of the data with ggplot
gapminder %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
library(gapminder)
library(modelr)
library(tidyverse)
install.packages('modelr')
install.packages('tidyverse')
install.packages('gapminder')
library(gapminder)
library(modelr)
library(tidyverse)
gapminder %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
nz <- filter(gapminder, country == "New Zealand")
rsconnect::deployApp("/Users/Mitch/Downloads/School/INFO201/a8-building-apps-mtorourke")
nz
gapminder %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
# Look only at new zealand
nz <- filter(gapminder, country == "New Zealand")
nz %>%
ggplot(aes(year, lifeExp)) +
geom_line() +
ggtitle("Full data = ")
nz_mod <- lm(lifeExp ~ year, data = nz)
nz %>%
add_predictions(nz_mod) %>%
ggplot(aes(year, pred)) +
geom_line() +
ggtitle("Linear trend + ")
nz %>%
add_residuals(nz_mod) %>%
ggplot(aes(year, resid)) +
geom_hline(yintercept = 0, colour = "white", size = 3) +
geom_line() +
ggtitle("Remaining pattern")
